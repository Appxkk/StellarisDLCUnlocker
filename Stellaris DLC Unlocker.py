import os
import shutil
import psutil
import re
from datetime import datetime

# --- –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø–∞–ø–æ–∫ Paradox ---
def delete_folder(path):
    if os.path.exists(path) and os.path.isdir(path):
        try:
            shutil.rmtree(path)
            print(f"[‚úî] –£–¥–∞–ª–µ–Ω–æ: {path}")
        except Exception as e:
            print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {path}: {e}")
    else:
        print(f"[i] –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ –ø–∞–ø–∫–∞: {path}")

# --- –ü–æ–∏—Å–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ ---
def find_file(root_path, filename):
    for root, dirs, files in os.walk(root_path):
        if filename in files:
            return os.path.join(root, filename)
    return None

def get_available_drives():
    drives = []
    partitions = psutil.disk_partitions()
    for partition in partitions:
        if partition.fstype:
            drives.append(partition.mountpoint)
    return drives

def find_and_run_installer(filename):
    drives = get_available_drives()
    for drive in drives:
        print(f"[üîç] –ò—â—É –Ω–∞ –¥–∏—Å–∫–µ: {drive}")
        file_path = find_file(drive, filename)
        if file_path:
            print(f"[‚úî] –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {file_path}")
            try:
                os.startfile(file_path)
                print(f"[‚ñ∂] –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
                return True
            except Exception as e:
                print(f"[!] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫: {e}")
                return False
    print(f"[‚úñ] –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∏—Å–∫–∞—Ö.")
    return False

def ask_user_about_update_cmd():
    while True:
        answer = input("\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∞—É–Ω—á–µ—Ä. –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç): ").strip().lower()
        if answer in ['–¥–∞', '–¥', 'yes', 'y']:
            input("‚è≥ –û–±–Ω–æ–≤–∏—Ç–µ –ª–∞—É–Ω—á–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ Enter, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ...")
            break
        elif answer in ['–Ω–µ—Ç', '–Ω', 'no', 'n']:
            print("‚ñ∂ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
            break
        else:
            print("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")

# --- –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ greenworks\lib ---
def update_launcher_files():
    base_path = os.path.join(os.environ['LOCALAPPDATA'], r"Programs\Paradox Interactive\launcher")
    pattern = re.compile(r'^launcher-v2\.(\d{4})\.(\d{1,2})$')

    latest_folder = None
    latest_date = None

    for folder in os.listdir(base_path):
        match = pattern.match(folder)
        if match:
            try:
                year = int(match.group(1))
                month = int(match.group(2))
                if 1 <= month <= 12:
                    folder_date = datetime(year, month, 1)
                    if latest_date is None or folder_date > latest_date:
                        latest_date = folder_date
                        latest_folder = folder
            except ValueError:
                continue

    if latest_folder:
        latest_path = os.path.join(base_path, latest_folder)
        final_path = os.path.join(latest_path, r"resources\app.asar.unpacked\node_modules\greenworks\lib")
        current_script_directory = os.path.dirname(os.path.abspath(__file__))
        source_folder = os.path.join(current_script_directory, "launcher")

        if os.path.exists(source_folder):
            files_copied = 0
            for file_name in os.listdir(source_folder):
                source_file = os.path.join(source_folder, file_name)
                dest_file = os.path.join(final_path, file_name)
                if os.path.isfile(source_file):
                    print(f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {file_name}...")
                    shutil.copy2(source_file, dest_file)
                    files_copied += 1
            if files_copied > 0:
                print(f"\n{files_copied} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–∏–Ω—É—Ç—ã –≤ –ø–∞–ø–∫—É '{final_path}'.")
            else:
                print("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
        else:
            print(f"–ü–∞–ø–∫–∞ —Å —Ñ–∞–π–ª–∞–º–∏ {source_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–∞–ø–∫–∏ —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º 'launcher-v2.YYYY.M'.")

# --- –ü–æ–∏—Å–∫ Steam –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ DLC –∏ game ---
def find_steamapps_path():
    drives = [f"{d}:\\" for d in "CDEFGHIJKLMNOPQRSTUVWXYZ" if os.path.exists(f"{d}:\\")]
    print("üîç –ü–æ–∏—Å–∫ –ø–∞–ø–∫–∏ Steam 'steamapps'...")
    for drive in drives:
        print(f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞ {drive}...")
        for root, dirs, files in os.walk(drive):
            if os.path.basename(root).lower() == "steamapps":
                print(f"üìÅ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ steamapps: {root}")
                return root
    print("‚ùå –ü–∞–ø–∫–∞ steamapps –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return None

def copy_all_contents(src, dst):
    copied = 0
    for item in os.listdir(src):
        src_path = os.path.join(src, item)
        dst_path = os.path.join(dst, item)
        if os.path.isdir(src_path):
            if os.path.exists(dst_path):
                shutil.rmtree(dst_path)
            shutil.copytree(src_path, dst_path)
            print(f"üìÅ –ü–∞–ø–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {item}")
            copied += 1
        elif os.path.isfile(src_path):
            shutil.copy2(src_path, dst_path)
            print(f"üìÑ –§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {item}")
            copied += 1
    return copied

def copy_stellaris_files():
    current_dir = os.path.dirname(os.path.abspath(__file__))
    steamapps_path = find_steamapps_path()

    if steamapps_path:
        stellaris_root = os.path.join(steamapps_path, "common", "Stellaris")
        stellaris_dlc = os.path.join(stellaris_root, "dlc")

        local_dlc = os.path.join(current_dir, "dlc")
        local_game = os.path.join(current_dir, "game")

        if os.path.exists(stellaris_dlc) and os.path.exists(local_dlc):
            print(f"\nüöÄ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑: {local_dlc} ‚Üí {stellaris_dlc}\n")
            total_dlc = copy_all_contents(local_dlc, stellaris_dlc)
            print(f"\n‚úÖ –í –ø–∞–ø–∫—É DLC —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {total_dlc} –æ–±—ä–µ–∫—Ç–æ–≤")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ DLC. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–∞–ø–∫–∞ 'dlc' —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º –∏ Stellaris —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

        if os.path.exists(stellaris_root) and os.path.exists(local_game):
            print(f"\nüöÄ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑: {local_game} ‚Üí {stellaris_root}\n")
            total_game = copy_all_contents(local_game, stellaris_root)
            print(f"\n‚úÖ –í –∫–æ—Ä–µ–Ω—å Stellaris —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {total_game} –æ–±—ä–µ–∫—Ç–æ–≤")
        else:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–∞–ø–∫—É Stellaris. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º –µ—Å—Ç—å –ø–∞–ø–∫–∞ 'game' –∏ Stellaris —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        print("\n‚ùå –ü—É—Ç—å –¥–æ Steamapps –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    print("‚ñ∂ –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø–∞–ø–æ–∫ Paradox...")
    user_profile = os.environ.get("USERPROFILE")
    folders_to_delete = [
        os.path.join(user_profile, r"AppData\Local\Programs\Paradox Interactive"),
        os.path.join(user_profile, r"AppData\Roaming\Paradox Interactive"),
        os.path.join(user_profile, r"AppData\Roaming\paradox-launcher-v2")
    ]

    for folder in folders_to_delete:
        print(f"\n–£–¥–∞–ª–µ–Ω–∏–µ: {folder}")
        delete_folder(folder)

    print("\n‚ñ∂ –ü–æ–∏—Å–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞...")
    installer_filename = "launcher-installer-windows_2024.14.msi"
    if find_and_run_installer(installer_filename):
        ask_user_about_update_cmd()
        update_launcher_files()
        print("\nüîÅ –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é –≤ Stellaris...\n")
        copy_stellaris_files()
    else:
        print("‚õî –£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    print("\n‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ñ–∞–π–ª. –£–¥–∞—á–Ω–æ–π –∏–≥—Ä—ã!")

if __name__ == "__main__":
    main()
